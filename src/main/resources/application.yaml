spring:
  application:
    name: ShardingSphere
  profiles:
    active: dev
  shardingsphere:
    mode:
      type: Memory
    datasource:
      names: server-user,server-order0,server-order1
      server-user:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://172.16.84.148:3301/db_user
        username: root
        password: 123456
      server-order0:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://172.16.84.148:3310/db_order
        username: root
        password: 123456
      server-order1:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://172.16.84.148:3312/db_order
        username: root
        password: 123456
    rules:
      sharding:
        tables:
          # 将逻辑表和真实的数据节点下的表映射起来
          t_user:
            actual-data-nodes: server-user.t_user
          t_order:
            # inLine表达式：进行笛卡尔积组合
            actual-data-nodes: server-order$->{[0,1]}.t_order$->{[0,1]}
            # 分库策略
            database-strategy:
              standard:
                # 分片列名称，根据user_id进行分片
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg_mod
            # 分表策略
            table-strategy:
              standard:
                # 分片列名称，根据order_no进行分片
                sharding-column: order_no
                # 分片算法名称
                sharding-algorithm-name: alg_hash_mod
            # 分布式序列策略
            key-generate-strategy:
              column: id
              key-generator-name: alg_snowflake
          t_order_item:
            # inLine表达式：进行笛卡尔积组合
            actual-data-nodes: server-order$->{[0,1]}.t_order_item$->{[0,1]}
            # 分库策略
            database-strategy:
              standard:
                # 分片列名称，根据user_id进行分片
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg_mod
            # 分表策略
            table-strategy:
              standard:
                # 分片列名称，根据order_no进行分片
                sharding-column: order_no
                # 分片算法名称
                sharding-algorithm-name: alg_hash_mod
            # 分布式序列策略
            key-generate-strategy:
              column: id
              key-generator-name: alg_snowflake
          t_dict:
            # inLine表达式：进行笛卡尔积组合
            actual-data-nodes: server-order$->{[0,1]}.t_dict,server-user.t_dict
        sharding-algorithms:
          # 行表达式分片算法
          alg_inline_userid:
            # 分片算法类型
            type: INLINE
            # 分片算法配置
            props:
              # 根据user_id对2取模决定存在哪张表中
              algorithm-expression: server-order$->{user_id%2}
          # 取模分片算法
          alg_mod:
            type: MOD
            props:
              sharding-count: 2
          # 哈希取模分片算法
          alg_hash_mod:
            type: HASH_MOD
            props:
              sharding-count: 2
        # 分布式序列
        key-generators:
          alg_snowflake:
            type: SNOWFLAKE
        # 绑定表配置
        binding-tables[0]: t_order,t_order_item
        # 广播表
        broadcast-tables: t_dict
    props:
      sql-show: true # 打印SQL